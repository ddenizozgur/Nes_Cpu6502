#if !defined(_CANVAS_H)
#define _CANVAS_H

#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>
#include <stdint.h>

#if defined(_MSC_VER)
#define INLINE __forceinline
#elif defined(__GNUC__) || defined(__clang__)
#define INLINE static inline __attribute__((always_inline))
#else
#define INLINE static inline
#endif

#define CANVAS_FONT_WIDTH   8
#define CANVAS_FONT_HEIGHT  8
#define CANVAS_TAB_WIDTH    8

#define ABS(x)      ((x) <  0  ? -(x) : (x))
#define MIN(x, y)   ((x) < (y) ?  (x) : (y))
#define MAX(x, y)   ((x) > (y) ?  (x) : (y))
#define ARRLEN(arr) (sizeof(arr) / sizeof((arr)[0]))

#define CLAMP(val, minval, maxval)  \
    (MIN(maxval, MAX(minval, val)))
#define LERP(from, to, t)   \
    ((from) + (t) * ((to) - (from)))

#if !defined(ASSERT)
#define ASSERT(cond, fmt, ...)                              \
    do {                                                    \
        if (!(cond)) {                                      \
            fprintf(stderr, "%s: %d: ", __FILE__, __LINE__);\
            fprintf(stderr, fmt "\n", ##__VA_ARGS__);       \
            exit(EXIT_FAILURE);                             \
        }                                                   \
    } while (0)
#endif  // ASSERT

INLINE void swap_int(int *_a, int *_b) {
    int temp = *_a;
    *_a = *_b;
    *_b = temp;
}

INLINE void swap_float(float *_a, float *_b) {
    float temp = *_a;
    *_a = *_b;
    *_b = temp;
}

INLINE uint64_t ceil64(uint64_t num, uint64_t to) {
    num += to - 1;
    return num - num % to;
}

void count_fps(float delta_time, int *_fps) {
    static float elapsed_time = 0.0f;
    static int count = 0;

    count++;
    if (elapsed_time >= 1.0f) {
        *_fps = count;
        count = 0;
        elapsed_time -= 1.0f;
    }

    elapsed_time += delta_time;
}

const char *file_read_all(const char *filename) {
// NOTE: !!! free() !!!
    FILE *filep = fopen(filename, "r");
    ASSERT(filep != NULL, "fopen() failed");

    fseek(filep, 0, SEEK_END);
    long filesz = ftell(filep);
    fseek(filep, 0, SEEK_SET);

    char *source = (char *)malloc(filesz + 1);
    ASSERT(source != NULL, "malloc() failed");

    if (filesz != fread(source, 1, filesz, filep))
        ASSERT(0, "fread() failed");
    source[filesz] = '\0';

    fclose(filep);
    return source;
}

typedef union {
    uint8_t  u8[4];
    uint32_t u32;
} ABGR8888;

#define CANVAS_BLACK    ((ABGR8888) { 0x00, 0x00, 0x00, 0xff })
#define CANVAS_BLUE     ((ABGR8888) { 0x00, 0x00, 0xaa, 0xff })
#define CANVAS_GREEN    ((ABGR8888) { 0x00, 0xaa, 0x00, 0xff })
#define CANVAS_CYAN     ((ABGR8888) { 0x00, 0xaa, 0xaa, 0xff })
#define CANVAS_RED      ((ABGR8888) { 0xaa, 0x00, 0x00, 0xff })
#define CANVAS_PURPLE   ((ABGR8888) { 0xaa, 0x00, 0xaa, 0xff })
#define CANVAS_BROWN    ((ABGR8888) { 0xaa, 0x55, 0x00, 0xff })
#define CANVAS_LTGRAY   ((ABGR8888) { 0xaa, 0xaa, 0xaa, 0xff })
#define CANVAS_DKGRAY   ((ABGR8888) { 0x55, 0x55, 0x55, 0xff })
#define CANVAS_LTBLUE   ((ABGR8888) { 0x55, 0x55, 0xff, 0xff })
#define CANVAS_LTGREEN  ((ABGR8888) { 0x55, 0xff, 0x55, 0xff })
#define CANVAS_LTCYAN   ((ABGR8888) { 0x55, 0xff, 0xff, 0xff })
#define CANVAS_LTRED    ((ABGR8888) { 0xff, 0x55, 0x55, 0xff })
#define CANVAS_LTPURPLE ((ABGR8888) { 0xff, 0x55, 0xff, 0xff })
#define CANVAS_YELLOW   ((ABGR8888) { 0xff, 0xff, 0x55, 0xff })
#define CANVAS_WHITE    ((ABGR8888) { 0xff, 0xff, 0xff, 0xff })

#define OLC_GREY                ((ABGR8888) { 192, 192, 192, 255 })
#define OLC_DARK_GREY           ((ABGR8888) { 128, 128, 128, 255 })
#define OLC_VERY_DARK_GREY      ((ABGR8888) { 64 , 64 , 64 , 255 })
#define OLC_RED                 ((ABGR8888) { 255, 0  , 0  , 255 })
#define OLC_DARK_RED            ((ABGR8888) { 128, 0  , 0  , 255 })
#define OLC_VERY_DARK_RED       ((ABGR8888) { 64 , 0  , 0  , 255 })
#define OLC_YELLOW              ((ABGR8888) { 255, 255, 0  , 255 })
#define OLC_DARK_YELLOW         ((ABGR8888) { 128, 128, 0  , 255 })
#define OLC_VERY_DARK_YELLOW    ((ABGR8888) { 64 , 64 , 0  , 255 })
#define OLC_GREEN               ((ABGR8888) { 0  , 255, 0  , 255 })
#define OLC_DARK_GREEN          ((ABGR8888) { 0  , 128, 0  , 255 })
#define OLC_VERY_DARK_GREEN     ((ABGR8888) { 0  , 64 , 0  , 255 })
#define OLC_CYAN                ((ABGR8888) { 0  , 255, 255, 255 })
#define OLC_DARK_CYAN           ((ABGR8888) { 0  , 128, 128, 255 })
#define OLC_VERY_DARK_CYAN      ((ABGR8888) { 0  , 64 , 64 , 255 })
#define OLC_BLUE                ((ABGR8888) { 0  , 0  , 255, 255 })
#define OLC_DARK_BLUE           ((ABGR8888) { 0  , 0  , 128, 255 })
#define OLC_VERY_DARK_BLUE      ((ABGR8888) { 0  , 0  , 64 , 255 })
#define OLC_MAGENTA             ((ABGR8888) { 255, 0  , 255, 255 })
#define OLC_DARK_MAGENTA        ((ABGR8888) { 128, 0  , 128, 255 })
#define OLC_VERY_DARK_MAGENTA   ((ABGR8888) { 64 , 0  , 64 , 255 })
#define OLC_WHITE               ((ABGR8888) { 255, 255, 255, 255 })
#define OLC_BLACK               ((ABGR8888) { 0  , 0  , 0  , 255 })

ABGR8888 _palette_canvas[] = {
    { 0x00, 0x00, 0xaa, 0xff },
    { 0x00, 0xaa, 0x00, 0xff },
    { 0x00, 0xaa, 0xaa, 0xff },
    { 0xaa, 0x00, 0x00, 0xff },
    { 0xaa, 0x00, 0xaa, 0xff },
    { 0xaa, 0x55, 0x00, 0xff },
    { 0xaa, 0xaa, 0xaa, 0xff },
    { 0x55, 0x55, 0x55, 0xff },
    { 0x55, 0x55, 0xff, 0xff },
    { 0x55, 0xff, 0x55, 0xff },
    { 0x55, 0xff, 0xff, 0xff },
    { 0xff, 0x55, 0x55, 0xff },
    { 0xff, 0x55, 0xff, 0xff },
    { 0xff, 0xff, 0x55, 0xff },
    { 0xff, 0xff, 0xff, 0xff },
    { 0x00, 0x00, 0x00, 0xff },
};

ABGR8888 _palette_olc[] = {
    { 192, 192, 192, 255 },
    { 128, 128, 128, 255 },
    { 64 , 64 , 64 , 255 },
    { 255, 0  , 0  , 255 },
    { 128, 0  , 0  , 255 },
    { 64 , 0  , 0  , 255 },
    { 255, 255, 0  , 255 },
    { 128, 128, 0  , 255 },
    { 64 , 64 , 0  , 255 },
    { 0  , 255, 0  , 255 },
    { 0  , 128, 0  , 255 },
    { 0  , 64 , 0  , 255 },
    { 0  , 255, 255, 255 },
    { 0  , 128, 128, 255 },
    { 0  , 64 , 64 , 255 },
    { 0  , 0  , 255, 255 },
    { 0  , 0  , 128, 255 },
    { 0  , 0  , 64 , 255 },
    { 255, 0  , 255, 255 },
    { 128, 0  , 128, 255 },
    { 64 , 0  , 64 , 255 },
    { 255, 255, 255, 255 },
    { 0  , 0  , 0  , 255 },
};

ABGR8888 _palette_pico8[] = {
    { 0x1d, 0x2b, 0x53, 0xff },
    { 0x7e, 0x25, 0x53, 0xff },
    { 0x00, 0x87, 0x51, 0xff },
    { 0xab, 0x52, 0x36, 0xff },
    { 0x5f, 0x57, 0x4f, 0xff },
    { 0xc2, 0xc3, 0xc7, 0xff },
    { 0xff, 0xf1, 0xe8, 0xff },
    { 0xff, 0x00, 0x4d, 0xff },
    { 0xff, 0xa3, 0x00, 0xff },
    { 0xff, 0xec, 0x27, 0xff },
    { 0x00, 0xe4, 0x36, 0xff },
    { 0x29, 0xad, 0xff, 0xff },
    { 0x83, 0x76, 0x9c, 0xff },
    { 0xff, 0x77, 0xa8, 0xff },
    { 0xff, 0xcc, 0xaa, 0xff },
    { 0x00, 0x00, 0x00, 0xff },
};

ABGR8888 _palette_vinik24[] = {
    { 0x6f, 0x67, 0x76, 0xff },
    { 0x9a, 0x9a, 0x97, 0xff },
    { 0xc5, 0xcc, 0xb8, 0xff },
    { 0x8b, 0x55, 0x80, 0xff },
    { 0xc3, 0x88, 0x90, 0xff },
    { 0xa5, 0x93, 0xa5, 0xff },
    { 0x66, 0x60, 0x92, 0xff },
    { 0x9a, 0x4f, 0x50, 0xff },
    { 0xc2, 0x8d, 0x75, 0xff },
    { 0x7c, 0xa1, 0xc0, 0xff },
    { 0x41, 0x6a, 0xa3, 0xff },
    { 0x8d, 0x62, 0x68, 0xff },
    { 0xbe, 0x95, 0x5c, 0xff },
    { 0x68, 0xac, 0xa9, 0xff },
    { 0x38, 0x70, 0x80, 0xff },
    { 0x6e, 0x69, 0x62, 0xff },
    { 0x93, 0xa1, 0x67, 0xff },
    { 0x6e, 0xaa, 0x78, 0xff },
    { 0x55, 0x70, 0x64, 0xff },
    { 0x9d, 0x9f, 0x7f, 0xff },
    { 0x7e, 0x9e, 0x99, 0xff },
    { 0x5d, 0x68, 0x72, 0xff },
    { 0x43, 0x34, 0x55, 0xff },
    { 0x00, 0x00, 0x00, 0xff },
};

ABGR8888 _palette_woodblock[] = {
    { 0x2b, 0x28, 0x21, 0xff },
    { 0x62, 0x4c, 0x3c, 0xff },
    { 0xd9, 0xac, 0x8b, 0xff },
    { 0xe3, 0xcf, 0xb4, 0xff },
    { 0x24, 0x3d, 0x5c, 0xff },
    { 0x5d, 0x72, 0x75, 0xff },
    { 0x5c, 0x8b, 0x93, 0xff },
    { 0xb1, 0xa5, 0x8d, 0xff },
    { 0xb0, 0x3a, 0x48, 0xff },
    { 0xd4, 0x80, 0x4d, 0xff },
    { 0xe0, 0xc8, 0x72, 0xff },
    { 0x3e, 0x69, 0x58, 0xff },
};

#define JBLOW_BACKGROUND    ((ABGR8888) { 0x07, 0x26, 0x26, 0xff })

#define GLYPH_HORZ          196
#define GLYPH_VERT          179
#define GLYPH_LEFT_TOP      218
#define GLYPH_RIGHT_TOP     191
#define GLYPH_LEFT_BOTTOM   192
#define GLYPH_RIGHT_BOTTOM  217

#define GLYPH_HORZ2         0xcd
#define GLYPH_VERT2         0xba
#define GLYPH_LEFT_TOP2     0xc9
#define GLYPH_RIGHT_TOP2    0xbb
#define GLYPH_LEFT_BOTTOM2  0xc8
#define GLYPH_RIGHT_BOTTOM2 0xbc

// #define GLYPH_CONNECTOR_TOP 194
// #define GLYPH_CONNECTOR_BOTTOM  193

uint8_t _font_debug[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
    0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
    0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
    0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
    0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
    0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x00,
    0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x36, 0x36, 0x7f, 0x36, 0x7f, 0x36, 0x36, 0x00,
    0x0c, 0x3f, 0x68, 0x3e, 0x0b, 0x7e, 0x18, 0x00,
    0x60, 0x66, 0x0c, 0x18, 0x30, 0x66, 0x06, 0x00,
    0x38, 0x6c, 0x6c, 0x38, 0x6d, 0x66, 0x3b, 0x00,
    0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0c, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00,
    0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00,
    0x00, 0x18, 0x7e, 0x3c, 0x7e, 0x18, 0x00, 0x00,
    0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30,
    0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
    0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00,
    0x3c, 0x66, 0x6e, 0x7e, 0x76, 0x66, 0x3c, 0x00,
    0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00,
    0x3c, 0x66, 0x06, 0x0c, 0x18, 0x30, 0x7e, 0x00,
    0x3c, 0x66, 0x06, 0x1c, 0x06, 0x66, 0x3c, 0x00,
    0x0c, 0x1c, 0x3c, 0x6c, 0x7e, 0x0c, 0x0c, 0x00,
    0x7e, 0x60, 0x7c, 0x06, 0x06, 0x66, 0x3c, 0x00,
    0x1c, 0x30, 0x60, 0x7c, 0x66, 0x66, 0x3c, 0x00,
    0x7e, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
    0x3c, 0x66, 0x66, 0x3c, 0x66, 0x66, 0x3c, 0x00,
    0x3c, 0x66, 0x66, 0x3e, 0x06, 0x0c, 0x38, 0x00,
    0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00,
    0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x30,
    0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00,
    0x00, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x00, 0x00,
    0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00,
    0x3c, 0x66, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x00,
    0x3c, 0x66, 0x6e, 0x6a, 0x6e, 0x60, 0x3c, 0x00,
    0x3c, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x00,
    0x7c, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x7c, 0x00,
    0x3c, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3c, 0x00,
    0x78, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0x78, 0x00,
    0x7e, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x7e, 0x00,
    0x7e, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x00,
    0x3c, 0x66, 0x60, 0x6e, 0x66, 0x66, 0x3c, 0x00,
    0x66, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x00,
    0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00,
    0x3e, 0x0c, 0x0c, 0x0c, 0x0c, 0x6c, 0x38, 0x00,
    0x66, 0x6c, 0x78, 0x70, 0x78, 0x6c, 0x66, 0x00,
    0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7e, 0x00,
    0x63, 0x77, 0x7f, 0x6b, 0x6b, 0x63, 0x63, 0x00,
    0x66, 0x66, 0x76, 0x7e, 0x6e, 0x66, 0x66, 0x00,
    0x3c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00,
    0x7c, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x00,
    0x3c, 0x66, 0x66, 0x66, 0x6a, 0x6c, 0x36, 0x00,
    0x7c, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x00,
    0x3c, 0x66, 0x60, 0x3c, 0x06, 0x66, 0x3c, 0x00,
    0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00,
    0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
    0x63, 0x63, 0x6b, 0x6b, 0x7f, 0x77, 0x63, 0x00,
    0x66, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0x66, 0x00,
    0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x00,
    0x7e, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x7e, 0x00,
    0x7c, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7c, 0x00,
    0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00,
    0x3e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x3e, 0x00,
    0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
    0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3c, 0x06, 0x3e, 0x66, 0x3e, 0x00,
    0x60, 0x60, 0x7c, 0x66, 0x66, 0x66, 0x7c, 0x00,
    0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x00,
    0x06, 0x06, 0x3e, 0x66, 0x66, 0x66, 0x3e, 0x00,
    0x00, 0x00, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
    0x1c, 0x30, 0x30, 0x7c, 0x30, 0x30, 0x30, 0x00,
    0x00, 0x00, 0x3e, 0x66, 0x66, 0x3e, 0x06, 0x3c,
    0x60, 0x60, 0x7c, 0x66, 0x66, 0x66, 0x66, 0x00,
    0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
    0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x70,
    0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0x00,
    0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00,
    0x00, 0x00, 0x36, 0x7f, 0x6b, 0x6b, 0x63, 0x00,
    0x00, 0x00, 0x7c, 0x66, 0x66, 0x66, 0x66, 0x00,
    0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x00,
    0x00, 0x00, 0x7c, 0x66, 0x66, 0x7c, 0x60, 0x60,
    0x00, 0x00, 0x3e, 0x66, 0x66, 0x3e, 0x06, 0x07,
    0x00, 0x00, 0x6c, 0x76, 0x60, 0x60, 0x60, 0x00,
    0x00, 0x00, 0x3e, 0x60, 0x3c, 0x06, 0x7c, 0x00,
    0x30, 0x30, 0x7c, 0x30, 0x30, 0x30, 0x1c, 0x00,
    0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3e, 0x00,
    0x00, 0x00, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00,
    0x00, 0x00, 0x63, 0x6b, 0x6b, 0x7f, 0x36, 0x00,
    0x00, 0x00, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0x00,
    0x00, 0x00, 0x66, 0x66, 0x66, 0x3e, 0x06, 0x3c,
    0x00, 0x00, 0x7e, 0x0c, 0x18, 0x30, 0x7e, 0x00,
    0x0c, 0x18, 0x18, 0x70, 0x18, 0x18, 0x0c, 0x00,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
    0x30, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x30, 0x00,
    0x31, 0x6b, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
    0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
    0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
    0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
    0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
    0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
    0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
    0x00, 0x00, 0x7c, 0xc0, 0xc0, 0x7c, 0x06, 0x3c,
    0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
    0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
    0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
    0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
    0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
    0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
    0xcc, 0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0x00,
    0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
    0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
    0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
    0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
    0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
    0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
    0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
    0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
    0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
    0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xfc, 0x0c, 0xf8,
    0xc6, 0x38, 0x7c, 0xc6, 0xc6, 0x7c, 0x38, 0x00,
    0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
    0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
    0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
    0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x00,
    0xf0, 0xd8, 0xd8, 0xf4, 0xcc, 0xde, 0xcc, 0x0e,
    0x0e, 0x1b, 0x18, 0x7e, 0x18, 0x18, 0xd8, 0x70,
    0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
    0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
    0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
    0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
    0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
    0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
    0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
    0x3c, 0x66, 0x66, 0x3c, 0x00, 0x7e, 0x00, 0x00,
    0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
    0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
    0xc6, 0xcc, 0xd8, 0x3e, 0x63, 0xce, 0x98, 0x1f,
    0xc6, 0xcc, 0xd8, 0xf3, 0x67, 0xcf, 0x9f, 0x03,
    0x00, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x18,
    0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
    0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
    0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
    0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
    0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
    0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
    0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
    0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
    0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
    0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
    0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
    0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
    0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
    0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
    0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
    0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
    0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
    0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
    0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
    0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
    0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0xf7, 0x36, 0x36, 0x36,
    0x18, 0x18, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
    0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
    0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
    0x00, 0xfe, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
    0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
    0xfe, 0x66, 0x30, 0x18, 0x30, 0x66, 0xfe, 0x00,
    0x00, 0x00, 0x7e, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
    0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
    0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
    0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
    0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
    0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
    0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
    0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
    0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
    0x3c, 0x60, 0xc0, 0xfc, 0xc0, 0x60, 0x3c, 0x00,
    0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
    0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
    0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
    0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
    0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
    0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
    0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
    0x00, 0x72, 0x9c, 0x00, 0x72, 0x9c, 0x00, 0x00,
    0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
    0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
    0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
    0x78, 0x0c, 0x38, 0x60, 0x7c, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
};

typedef struct {
    int width, height;
    size_t pitch, range;
    ABGR8888 color;
    uint32_t *buffer;
    uint8_t *font_bitmap;
} Canvas;

Canvas canvas_alloc(int width, int height) {
    Canvas canvas = {
        .width  = width,
        .height = height,
        .pitch = width * sizeof(uint32_t),
        .range = width * height,
        .font_bitmap = _font_debug,
    };

    canvas.buffer = (uint32_t *)calloc(canvas.range, sizeof(uint32_t));
    ASSERT(canvas.buffer != NULL, "calloc() failed");
    return canvas;
}

void canvas_realloc(Canvas *canvas, int width, int height) {
    canvas->width  = width;
    canvas->height = height;

    canvas->pitch = width * sizeof(uint32_t);
    canvas->range = (size_t)width * height;

    void *temp = realloc(canvas->buffer, canvas->range * sizeof(uint32_t));
    ASSERT(temp != NULL, "realloc() failed");
    canvas->buffer = (uint32_t *)temp;
}

void canvas_free(Canvas *canvas) {
// NOTE: !!! if only called canvas_alloc() before !!!
    free((void *)canvas->buffer);
    canvas->buffer = NULL;
    canvas->width = canvas->height = 0;
    canvas->pitch = canvas->range = 0;
}

Canvas canvas_init(int width, int height, uint32_t *buffer) {
    return (Canvas) {
        .width  = width,
        .height = height,
        .buffer = buffer,
        .pitch = width * sizeof(uint32_t),
        .range = width * height,
        .font_bitmap = _font_debug,
    };
}

INLINE void canvas_set_font(Canvas *canvas, uint8_t *font_bitmap) {
// ASSERT(font_bitmap != NULL, "font_bitmap is NULL");
    canvas->font_bitmap = font_bitmap;
}

INLINE void canvas_plot(Canvas *canvas, int x, int y) {
    if (x >= 0 && x < canvas->width && y >= 0 && y < canvas->height)
        canvas->buffer[y * canvas->width + x] = canvas->color.u32;
}

INLINE ABGR8888 canvas_peek(Canvas *canvas, int x, int y) {
    if (x >= 0 && x < canvas->width && y >= 0 && y < canvas->height)
        return (ABGR8888) { .u32 = canvas->buffer[y * canvas->width + x] };
    return (ABGR8888) { 0 };
}

INLINE void canvas_fill(Canvas *canvas) {
    for (size_t i = 0; i < canvas->range; i++)
        canvas->buffer[i] = canvas->color.u32;
}

void canvas_fill_rect(Canvas *canvas, int x, int y, int w, int h) {
    int l = MAX(0, x);
    int r = MIN(x + w, canvas->width);
    int t = MAX(0, y);
    int b = MIN(y + h, canvas->height);

    for (int j = t; j < b; j++)
        for (int i = l; i < r; i++) {
            size_t idx = (size_t)j * canvas->width + i;
            canvas->buffer[idx] = canvas->color.u32;
        }
}

void canvas_putchar(Canvas *canvas, int x, int y, uint8_t c) {
    if (x <= -CANVAS_FONT_WIDTH  || x >= canvas->width ||
        y <= -CANVAS_FONT_HEIGHT || y >= canvas->height)
        return;

    uint8_t *ptr = &canvas->font_bitmap[c * CANVAS_FONT_HEIGHT];
    if (x >= 0 && x < canvas->width  - CANVAS_FONT_WIDTH &&
        y >= 0 && y < canvas->height - CANVAS_FONT_HEIGHT) {
        for (int j = 0; j < CANVAS_FONT_HEIGHT; j++) {
            uint8_t temp = ptr[j];
            for (int i = 0; i < CANVAS_FONT_WIDTH; i++)
                if (temp & 1u << (CANVAS_FONT_WIDTH - i - 1)) {
                    size_t idx = ((size_t)y + j) * canvas->width + x + i;
                    canvas->buffer[idx] = canvas->color.u32;
                }
        }
        return;
    }

    for (int j = 0; j < CANVAS_FONT_HEIGHT; j++) {
        uint8_t temp = ptr[j];
        for (int i = 0; i < CANVAS_FONT_WIDTH; i++)
            if (temp & 1u << (CANVAS_FONT_WIDTH - i - 1))
                canvas_plot(canvas, x + i, y + j);
    }
}

void canvas_puts(Canvas *canvas, int x, int y, const char *str) {
    int x0 = x;

    while (*str != '\0') {
        if (*str == '\n') {
            x = x0;
            y += CANVAS_FONT_HEIGHT;
        } else if (*str == '\t') {
            x = x0 + ceil64((uint64_t)x - x0 + CANVAS_FONT_WIDTH,
                CANVAS_FONT_WIDTH * CANVAS_TAB_WIDTH);
        } else {
// TODO: fix clamping
            canvas_putchar(canvas, x, y, *str);
            x += CANVAS_FONT_WIDTH;
        }
        if (y >= canvas->height)
            break;
        str++;
    }
}

void calc_string_cols_rows(const char *str, int *_cols, int *_rows) {
    *_cols = *_rows = 0;

    int x = 0, y = 0;
    while (*str != '\0') {
        if (*str == '\n') {
            x = 0, y++;
            if (y > *_rows) *_rows = y;
        } else if (*str == '\t') {
            x = ceil64((uint64_t)x + 1, CANVAS_TAB_WIDTH);
            if (x > *_cols) *_cols = x;
        } else {
// TODO: fix clamping
            x++;
            if (x > *_cols) *_cols = x;
        }
        // if (y * CANVAS_FONT_HEIGHT >= canvas->height)
        //     break;
        str++;
    }

    (*_rows)++;
}

void canvas_printf(Canvas *canvas, int x, int y, const char *fmt, ...) {
// NOTE: @speed vsnprintf ???
    va_list args;
    va_start(args, fmt);

    char temp[512] = { 0 };
    vsnprintf(temp, 512, fmt, args);
    va_end(args);

    canvas_puts(canvas, x, y, temp);
}

INLINE void canvas_horz_line(Canvas *canvas, int x, int y, int x2) {
    if (y < 0 || y >= canvas->height)
        return;

    int l = MAX(0, MIN(x, x2));
    int r = MIN(canvas->width - 1, MAX(x, x2));

    for (int i = l; i <= r; i++)
        canvas->buffer[y * canvas->width + i] = canvas->color.u32;
}

INLINE void canvas_vert_line(Canvas *canvas, int x, int y, int y2) {
    if (x < 0 || x >= canvas->width)
        return;

    int t = MAX(0, MIN(y, y2));
    int b = MIN(canvas->height - 1, MAX(y, y2));

    for (int j = t; j <= b; j++)
        canvas->buffer[j * canvas->width + x] = canvas->color.u32;
}

//
// UTILITIES
//

void draw_grid(Canvas *canvas, int x, int y, int cols, int rows, int cellsz) {
    for (int j = 0; j <= rows; j++)
        canvas_horz_line(canvas, x, y + j * cellsz, x + cols * cellsz);
    for (int i = 0; i <= cols; i++)
        canvas_vert_line(canvas, x + i * cellsz, y, y + rows * cellsz);
}

void draw_font_bitmap(Canvas *canvas, int x, int y) {
    for (int j = 0; j < 16; j++) {
        for (int i = 0; i < 16; i++) {
            canvas->color = CANVAS_WHITE;
            canvas_putchar(canvas, x + i * 3 * CANVAS_FONT_WIDTH,
                y + j * 3 * CANVAS_FONT_HEIGHT, j * 16 + i);

            canvas->color = CANVAS_LTRED;
            canvas_printf(canvas, x + i * 3 * CANVAS_FONT_WIDTH,
                CANVAS_FONT_HEIGHT + y + j * 3 * CANVAS_FONT_HEIGHT,
                "%02x", j * 16 + i);
        }
    }
}

void draw_memory(Canvas *canvas, int x, int y, int cols, int rows, void *addr) {
    uint8_t *ptr = (uint8_t *)addr;

    int x0 = x;
    for (int j = 0; j < rows; j++) {
        canvas->color = CANVAS_WHITE;
        canvas_printf(canvas, x, y, "%016llx:", (uint64_t)ptr);
        x += 18 * CANVAS_FONT_WIDTH;

        for (int i = 0; i < cols; i++) {
            uint8_t data = *ptr++;
            canvas->color = data == 0 ? CANVAS_LTGRAY : CANVAS_WHITE;
            canvas_printf(canvas, x, y, "%02x", data);
            x += 3 * CANVAS_FONT_WIDTH;
        }

        x = x0;
        y += CANVAS_FONT_HEIGHT;
    }
}

void draw_frame_ascii(Canvas *canvas, int x, int y, int cols, int rows) {
    for (int i = 1; i < cols - 1; i++) {
        canvas_putchar(canvas, x + i * CANVAS_FONT_WIDTH, y, GLYPH_HORZ);
        canvas_putchar(canvas, x + i * CANVAS_FONT_WIDTH, y + (rows - 1) * CANVAS_FONT_HEIGHT, GLYPH_HORZ);
    }
    canvas_putchar(canvas, x, y, GLYPH_LEFT_TOP);
    canvas_putchar(canvas, x + (cols - 1) * CANVAS_FONT_WIDTH, y, GLYPH_RIGHT_TOP);

    for (int j = 1; j < rows - 1; j++) {
        canvas_putchar(canvas, x, y + j * CANVAS_FONT_HEIGHT, GLYPH_VERT);
        canvas_putchar(canvas, x + (cols - 1) * CANVAS_FONT_WIDTH, y + j * CANVAS_FONT_HEIGHT, GLYPH_VERT);
    }
    canvas_putchar(canvas, x, y + (rows - 1) * CANVAS_FONT_HEIGHT, GLYPH_LEFT_BOTTOM);
    canvas_putchar(canvas, x + (cols - 1) * CANVAS_FONT_WIDTH, y + (rows - 1) * CANVAS_FONT_HEIGHT, GLYPH_RIGHT_BOTTOM);
}

#endif  // _CANVAS_H